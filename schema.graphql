# Exposes a URL that specifies the behaviour of this scalar.
directive @specifiedBy(
  # The URL that specifies the behaviour of this scalar.
  url: String!
) on SCALAR

# A connection to a list of `Category` values.
type CategoriesConnection {
  # A list of `Category` objects.
  nodes: [Category]!

  # A list of edges which contains the `Category` and cursor to aid in pagination.
  edges: [CategoriesEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Category` you could get from the connection.
  totalCount: Int!
}

# A `Category` edge in the connection.
type CategoriesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Category` at the end of the edge.
  node: Category
}

# Methods to use when ordering `Category`.
enum CategoriesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  NAME_ASC
  NAME_DESC
  COLOR_ASC
  COLOR_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Category implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: Int!
  userId: String
  name: String
  color: String

  # Reads and enables pagination through a set of `Tag`.
  tagsByCategoryId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Tag`.
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]

    # A condition to be used in determining which values should be returned by the collection.
    condition: TagCondition
  ): TagsConnection!
}

# A condition to be used against `Category` object types. All fields are tested
# for equality and combined with a logical ‘and.’
input CategoryCondition {
  # Checks for equality with the object’s `id` field.
  id: Int

  # Checks for equality with the object’s `userId` field.
  userId: String

  # Checks for equality with the object’s `name` field.
  name: String

  # Checks for equality with the object’s `color` field.
  color: String
}

# An input for mutations affecting `Category`
input CategoryInput {
  id: Int
  userId: String
  name: String
  color: String
}

# Represents an update to a `Category`. Fields that are set will be updated.
input CategoryPatch {
  id: Int
  userId: String
  name: String
  color: String
}

# All input for the create `Category` mutation.
input CreateCategoryInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The `Category` to be created by this mutation.
  category: CategoryInput!
}

# The output of our create `Category` mutation.
type CreateCategoryPayload {
  # The exact same `clientMutationId` that was provided in the mutation input,
  # unchanged and unused. May be used by a client to track mutations.
  clientMutationId: String

  # The `Category` that was created by this mutation.
  category: Category

  # Our root query field type. Allows us to run any query from our mutation payload.
  query: Query

  # An edge for our `Category`. May be used by Relay 1.
  categoryEdge(
    # The method to use when ordering `Category`.
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesEdge
}

# All input for the create `Message` mutation.
input CreateMessageInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The `Message` to be created by this mutation.
  message: MessageInput!
}

# The output of our create `Message` mutation.
type CreateMessagePayload {
  # The exact same `clientMutationId` that was provided in the mutation input,
  # unchanged and unused. May be used by a client to track mutations.
  clientMutationId: String

  # The `Message` that was created by this mutation.
  message: Message

  # Our root query field type. Allows us to run any query from our mutation payload.
  query: Query

  # An edge for our `Message`. May be used by Relay 1.
  messageEdge(
    # The method to use when ordering `Message`.
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessagesEdge
}

# All input for the create `MessageTag` mutation.
input CreateMessageTagInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The `MessageTag` to be created by this mutation.
  messageTag: MessageTagInput!
}

# The output of our create `MessageTag` mutation.
type CreateMessageTagPayload {
  # The exact same `clientMutationId` that was provided in the mutation input,
  # unchanged and unused. May be used by a client to track mutations.
  clientMutationId: String

  # The `MessageTag` that was created by this mutation.
  messageTag: MessageTag

  # Our root query field type. Allows us to run any query from our mutation payload.
  query: Query

  # Reads a single `Message` that is related to this `MessageTag`.
  messageByMessageId: Message

  # Reads a single `Tag` that is related to this `MessageTag`.
  tagByTagId: Tag

  # An edge for our `MessageTag`. May be used by Relay 1.
  messageTagEdge(
    # The method to use when ordering `MessageTag`.
    orderBy: [MessageTagsOrderBy!] = [NATURAL]
  ): MessageTagsEdge
}

# All input for the create `Tag` mutation.
input CreateTagInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The `Tag` to be created by this mutation.
  tag: TagInput!
}

# The output of our create `Tag` mutation.
type CreateTagPayload {
  # The exact same `clientMutationId` that was provided in the mutation input,
  # unchanged and unused. May be used by a client to track mutations.
  clientMutationId: String

  # The `Tag` that was created by this mutation.
  tag: Tag

  # Our root query field type. Allows us to run any query from our mutation payload.
  query: Query

  # Reads a single `Category` that is related to this `Tag`.
  categoryByCategoryId: Category

  # An edge for our `Tag`. May be used by Relay 1.
  tagEdge(
    # The method to use when ordering `Tag`.
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge
}

# A location in a connection that can be used for resuming pagination.
scalar Cursor

# All input for the `deleteCategoryById` mutation.
input DeleteCategoryByIdInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String
  id: Int!
}

# All input for the `deleteCategory` mutation.
input DeleteCategoryInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The globally unique `ID` which will identify a single `Category` to be deleted.
  nodeId: ID!
}

# The output of our delete `Category` mutation.
type DeleteCategoryPayload {
  # The exact same `clientMutationId` that was provided in the mutation input,
  # unchanged and unused. May be used by a client to track mutations.
  clientMutationId: String

  # The `Category` that was deleted by this mutation.
  category: Category
  deletedCategoryId: ID

  # Our root query field type. Allows us to run any query from our mutation payload.
  query: Query

  # An edge for our `Category`. May be used by Relay 1.
  categoryEdge(
    # The method to use when ordering `Category`.
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesEdge
}

# All input for the `deleteMessageById` mutation.
input DeleteMessageByIdInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String
  id: Int!
}

# All input for the `deleteMessage` mutation.
input DeleteMessageInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The globally unique `ID` which will identify a single `Message` to be deleted.
  nodeId: ID!
}

# The output of our delete `Message` mutation.
type DeleteMessagePayload {
  # The exact same `clientMutationId` that was provided in the mutation input,
  # unchanged and unused. May be used by a client to track mutations.
  clientMutationId: String

  # The `Message` that was deleted by this mutation.
  message: Message
  deletedMessageId: ID

  # Our root query field type. Allows us to run any query from our mutation payload.
  query: Query

  # An edge for our `Message`. May be used by Relay 1.
  messageEdge(
    # The method to use when ordering `Message`.
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessagesEdge
}

# All input for the `deleteTagById` mutation.
input DeleteTagByIdInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String
  id: Int!
}

# All input for the `deleteTag` mutation.
input DeleteTagInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The globally unique `ID` which will identify a single `Tag` to be deleted.
  nodeId: ID!
}

# The output of our delete `Tag` mutation.
type DeleteTagPayload {
  # The exact same `clientMutationId` that was provided in the mutation input,
  # unchanged and unused. May be used by a client to track mutations.
  clientMutationId: String

  # The `Tag` that was deleted by this mutation.
  tag: Tag
  deletedTagId: ID

  # Our root query field type. Allows us to run any query from our mutation payload.
  query: Query

  # Reads a single `Category` that is related to this `Tag`.
  categoryByCategoryId: Category

  # An edge for our `Tag`. May be used by Relay 1.
  tagEdge(
    # The method to use when ordering `Tag`.
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge
}

type Message implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: Int!
  userId: String
  content: String

  # Reads and enables pagination through a set of `MessageTag`.
  messageTagsByMessageId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `MessageTag`.
    orderBy: [MessageTagsOrderBy!] = [NATURAL]

    # A condition to be used in determining which values should be returned by the collection.
    condition: MessageTagCondition
  ): MessageTagsConnection!
}

# A condition to be used against `Message` object types. All fields are tested for equality and combined with a logical ‘and.’
input MessageCondition {
  # Checks for equality with the object’s `id` field.
  id: Int

  # Checks for equality with the object’s `userId` field.
  userId: String

  # Checks for equality with the object’s `content` field.
  content: String
}

# An input for mutations affecting `Message`
input MessageInput {
  id: Int
  userId: String
  content: String
}

# Represents an update to a `Message`. Fields that are set will be updated.
input MessagePatch {
  id: Int
  userId: String
  content: String
}

# A connection to a list of `Message` values.
type MessagesConnection {
  # A list of `Message` objects.
  nodes: [Message]!

  # A list of edges which contains the `Message` and cursor to aid in pagination.
  edges: [MessagesEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Message` you could get from the connection.
  totalCount: Int!
}

# A `Message` edge in the connection.
type MessagesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Message` at the end of the edge.
  node: Message
}

# Methods to use when ordering `Message`.
enum MessagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  CONTENT_ASC
  CONTENT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type MessageTag {
  messageId: Int!
  tagId: Int!

  # Reads a single `Message` that is related to this `MessageTag`.
  messageByMessageId: Message

  # Reads a single `Tag` that is related to this `MessageTag`.
  tagByTagId: Tag
}

# A condition to be used against `MessageTag` object types. All fields are tested
# for equality and combined with a logical ‘and.’
input MessageTagCondition {
  # Checks for equality with the object’s `messageId` field.
  messageId: Int

  # Checks for equality with the object’s `tagId` field.
  tagId: Int
}

# An input for mutations affecting `MessageTag`
input MessageTagInput {
  messageId: Int!
  tagId: Int!
}

# A connection to a list of `MessageTag` values.
type MessageTagsConnection {
  # A list of `MessageTag` objects.
  nodes: [MessageTag]!

  # A list of edges which contains the `MessageTag` and cursor to aid in pagination.
  edges: [MessageTagsEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `MessageTag` you could get from the connection.
  totalCount: Int!
}

# A `MessageTag` edge in the connection.
type MessageTagsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `MessageTag` at the end of the edge.
  node: MessageTag
}

# Methods to use when ordering `MessageTag`.
enum MessageTagsOrderBy {
  NATURAL
  MESSAGE_ID_ASC
  MESSAGE_ID_DESC
  TAG_ID_ASC
  TAG_ID_DESC
}

# The root mutation type which contains root level fields which mutate data.
type Mutation {
  # Creates a single `Category`.
  createCategory(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: CreateCategoryInput!
  ): CreateCategoryPayload

  # Creates a single `Message`.
  createMessage(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: CreateMessageInput!
  ): CreateMessagePayload

  # Creates a single `MessageTag`.
  createMessageTag(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: CreateMessageTagInput!
  ): CreateMessageTagPayload

  # Creates a single `Tag`.
  createTag(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: CreateTagInput!
  ): CreateTagPayload

  # Updates a single `Category` using its globally unique id and a patch.
  updateCategory(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: UpdateCategoryInput!
  ): UpdateCategoryPayload

  # Updates a single `Category` using a unique key and a patch.
  updateCategoryById(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: UpdateCategoryByIdInput!
  ): UpdateCategoryPayload

  # Updates a single `Message` using its globally unique id and a patch.
  updateMessage(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: UpdateMessageInput!
  ): UpdateMessagePayload

  # Updates a single `Message` using a unique key and a patch.
  updateMessageById(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: UpdateMessageByIdInput!
  ): UpdateMessagePayload

  # Updates a single `Tag` using its globally unique id and a patch.
  updateTag(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: UpdateTagInput!
  ): UpdateTagPayload

  # Updates a single `Tag` using a unique key and a patch.
  updateTagById(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: UpdateTagByIdInput!
  ): UpdateTagPayload

  # Deletes a single `Category` using its globally unique id.
  deleteCategory(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: DeleteCategoryInput!
  ): DeleteCategoryPayload

  # Deletes a single `Category` using a unique key.
  deleteCategoryById(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: DeleteCategoryByIdInput!
  ): DeleteCategoryPayload

  # Deletes a single `Message` using its globally unique id.
  deleteMessage(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: DeleteMessageInput!
  ): DeleteMessagePayload

  # Deletes a single `Message` using a unique key.
  deleteMessageById(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: DeleteMessageByIdInput!
  ): DeleteMessagePayload

  # Deletes a single `Tag` using its globally unique id.
  deleteTag(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: DeleteTagInput!
  ): DeleteTagPayload

  # Deletes a single `Tag` using a unique key.
  deleteTagById(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: DeleteTagByIdInput!
  ): DeleteTagPayload
}

# An object with a globally unique `ID`.
interface Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: Cursor

  # When paginating forwards, the cursor to continue.
  endCursor: Cursor
}

# The root query type which gives access points into the data universe.
type Query implements Node {
  # Exposes the root query type nested one level down. This is helpful for Relay 1
  # which can only query top level fields if they are in a particular form.
  query: Query!

  # The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  nodeId: ID!

  # Fetches an object given its globally unique `ID`.
  node(
    # The globally unique `ID`.
    nodeId: ID!
  ): Node

  # Reads and enables pagination through a set of `Category`.
  allCategories(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Category`.
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]

    # A condition to be used in determining which values should be returned by the collection.
    condition: CategoryCondition
  ): CategoriesConnection

  # Reads and enables pagination through a set of `Message`.
  allMessages(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Message`.
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    # A condition to be used in determining which values should be returned by the collection.
    condition: MessageCondition
  ): MessagesConnection

  # Reads and enables pagination through a set of `MessageTag`.
  allMessageTags(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `MessageTag`.
    orderBy: [MessageTagsOrderBy!] = [NATURAL]

    # A condition to be used in determining which values should be returned by the collection.
    condition: MessageTagCondition
  ): MessageTagsConnection

  # Reads and enables pagination through a set of `Tag`.
  allTags(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Tag`.
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]

    # A condition to be used in determining which values should be returned by the collection.
    condition: TagCondition
  ): TagsConnection
  categoryById(id: Int!): Category
  messageById(id: Int!): Message
  tagById(id: Int!): Tag

  # Reads a single `Category` using its globally unique `ID`.
  category(
    # The globally unique `ID` to be used in selecting a single `Category`.
    nodeId: ID!
  ): Category

  # Reads a single `Message` using its globally unique `ID`.
  message(
    # The globally unique `ID` to be used in selecting a single `Message`.
    nodeId: ID!
  ): Message

  # Reads a single `Tag` using its globally unique `ID`.
  tag(
    # The globally unique `ID` to be used in selecting a single `Tag`.
    nodeId: ID!
  ): Tag
}

type Tag implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: Int!
  userId: String
  name: String
  categoryId: Int!

  # Reads a single `Category` that is related to this `Tag`.
  categoryByCategoryId: Category

  # Reads and enables pagination through a set of `MessageTag`.
  messageTagsByTagId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `MessageTag`.
    orderBy: [MessageTagsOrderBy!] = [NATURAL]

    # A condition to be used in determining which values should be returned by the collection.
    condition: MessageTagCondition
  ): MessageTagsConnection!
}

# A condition to be used against `Tag` object types. All fields are tested for equality and combined with a logical ‘and.’
input TagCondition {
  # Checks for equality with the object’s `id` field.
  id: Int

  # Checks for equality with the object’s `userId` field.
  userId: String

  # Checks for equality with the object’s `name` field.
  name: String

  # Checks for equality with the object’s `categoryId` field.
  categoryId: Int
}

# An input for mutations affecting `Tag`
input TagInput {
  id: Int
  userId: String
  name: String
  categoryId: Int!
}

# Represents an update to a `Tag`. Fields that are set will be updated.
input TagPatch {
  id: Int
  userId: String
  name: String
  categoryId: Int
}

# A connection to a list of `Tag` values.
type TagsConnection {
  # A list of `Tag` objects.
  nodes: [Tag]!

  # A list of edges which contains the `Tag` and cursor to aid in pagination.
  edges: [TagsEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Tag` you could get from the connection.
  totalCount: Int!
}

# A `Tag` edge in the connection.
type TagsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Tag` at the end of the edge.
  node: Tag
}

# Methods to use when ordering `Tag`.
enum TagsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  NAME_ASC
  NAME_DESC
  CATEGORY_ID_ASC
  CATEGORY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# All input for the `updateCategoryById` mutation.
input UpdateCategoryByIdInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # An object where the defined keys will be set on the `Category` being updated.
  categoryPatch: CategoryPatch!
  id: Int!
}

# All input for the `updateCategory` mutation.
input UpdateCategoryInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The globally unique `ID` which will identify a single `Category` to be updated.
  nodeId: ID!

  # An object where the defined keys will be set on the `Category` being updated.
  categoryPatch: CategoryPatch!
}

# The output of our update `Category` mutation.
type UpdateCategoryPayload {
  # The exact same `clientMutationId` that was provided in the mutation input,
  # unchanged and unused. May be used by a client to track mutations.
  clientMutationId: String

  # The `Category` that was updated by this mutation.
  category: Category

  # Our root query field type. Allows us to run any query from our mutation payload.
  query: Query

  # An edge for our `Category`. May be used by Relay 1.
  categoryEdge(
    # The method to use when ordering `Category`.
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesEdge
}

# All input for the `updateMessageById` mutation.
input UpdateMessageByIdInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # An object where the defined keys will be set on the `Message` being updated.
  messagePatch: MessagePatch!
  id: Int!
}

# All input for the `updateMessage` mutation.
input UpdateMessageInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The globally unique `ID` which will identify a single `Message` to be updated.
  nodeId: ID!

  # An object where the defined keys will be set on the `Message` being updated.
  messagePatch: MessagePatch!
}

# The output of our update `Message` mutation.
type UpdateMessagePayload {
  # The exact same `clientMutationId` that was provided in the mutation input,
  # unchanged and unused. May be used by a client to track mutations.
  clientMutationId: String

  # The `Message` that was updated by this mutation.
  message: Message

  # Our root query field type. Allows us to run any query from our mutation payload.
  query: Query

  # An edge for our `Message`. May be used by Relay 1.
  messageEdge(
    # The method to use when ordering `Message`.
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessagesEdge
}

# All input for the `updateTagById` mutation.
input UpdateTagByIdInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # An object where the defined keys will be set on the `Tag` being updated.
  tagPatch: TagPatch!
  id: Int!
}

# All input for the `updateTag` mutation.
input UpdateTagInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The globally unique `ID` which will identify a single `Tag` to be updated.
  nodeId: ID!

  # An object where the defined keys will be set on the `Tag` being updated.
  tagPatch: TagPatch!
}

# The output of our update `Tag` mutation.
type UpdateTagPayload {
  # The exact same `clientMutationId` that was provided in the mutation input,
  # unchanged and unused. May be used by a client to track mutations.
  clientMutationId: String

  # The `Tag` that was updated by this mutation.
  tag: Tag

  # Our root query field type. Allows us to run any query from our mutation payload.
  query: Query

  # Reads a single `Category` that is related to this `Tag`.
  categoryByCategoryId: Category

  # An edge for our `Tag`. May be used by Relay 1.
  tagEdge(
    # The method to use when ordering `Tag`.
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge
}

