"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Reads and enables pagination through a set of `Category`."""
  allCategories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CategoryCondition
  ): CategoriesConnection

  """Reads and enables pagination through a set of `ConfigCategory`."""
  allConfigCategories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ConfigCategory`."""
    orderBy: [ConfigCategoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConfigCategoryCondition
  ): ConfigCategoriesConnection

  """Reads and enables pagination through a set of `Invite`."""
  allInvites(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Invite`."""
    orderBy: [InvitesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InviteCondition
  ): InvitesConnection

  """Reads and enables pagination through a set of `Message`."""
  allMessages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition
  ): MessagesConnection

  """Reads and enables pagination through a set of `MessageTag`."""
  allMessageTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MessageTag`."""
    orderBy: [MessageTagsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageTagCondition
  ): MessageTagsConnection

  """Reads and enables pagination through a set of `Organization`."""
  allOrganizations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition
  ): OrganizationsConnection

  """Reads and enables pagination through a set of `OrganizationUser`."""
  allOrganizationUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrganizationUser`."""
    orderBy: [OrganizationUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationUserCondition
  ): OrganizationUsersConnection

  """Reads and enables pagination through a set of `Tag`."""
  allTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition
  ): TagsConnection

  """Reads and enables pagination through a set of `UserConfig`."""
  allUserConfigs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserConfig`."""
    orderBy: [UserConfigsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserConfigCondition
  ): UserConfigsConnection
  accountByRowId(rowId: Int!): Account
  categoryByRowId(rowId: Int!): Category
  configCategoryByUserIdAndCategoryId(userId: Int!, categoryId: Int!): ConfigCategory
  inviteByRowId(rowId: Int!): Invite
  messageByRowId(rowId: Int!): Message
  organizationByRowId(rowId: Int!): Organization
  organizationUserByRowId(rowId: Int!): OrganizationUser
  sessionByRowId(rowId: Int!): Session
  stripeByRowId(rowId: Int!): Stripe
  tagByRowId(rowId: Int!): Tag
  userConfigByUserId(userId: Int!): UserConfig
  userConfigByRowId(rowId: Int!): UserConfig
  userByRowId(rowId: Int!): User
  verificationRequestByRowId(rowId: Int!): VerificationRequest
  currentUserId: String
  organizationActiveSeats(organizationId: Int): Int
  organizationOwner(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): OrganizationOwnerConnection
  organizationPaid(organizationId: Int): Int
  organizationUserBalance(organizationId: Int): Int

  """Reads and enables pagination through a set of `Tag`."""
  sidebar(
    tagId: [Int]

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): TagsConnection

  """Reads and enables pagination through a set of `Message`."""
  tile(
    organizationId: Int
    tagId: [Int]

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): MessagesConnection

  """Reads a single `Account` using its globally unique `ID`."""
  account(
    """The globally unique `ID` to be used in selecting a single `Account`."""
    id: ID!
  ): Account

  """Reads a single `Category` using its globally unique `ID`."""
  category(
    """The globally unique `ID` to be used in selecting a single `Category`."""
    id: ID!
  ): Category

  """Reads a single `ConfigCategory` using its globally unique `ID`."""
  configCategory(
    """
    The globally unique `ID` to be used in selecting a single `ConfigCategory`.
    """
    id: ID!
  ): ConfigCategory

  """Reads a single `Invite` using its globally unique `ID`."""
  invite(
    """The globally unique `ID` to be used in selecting a single `Invite`."""
    id: ID!
  ): Invite

  """Reads a single `Message` using its globally unique `ID`."""
  message(
    """The globally unique `ID` to be used in selecting a single `Message`."""
    id: ID!
  ): Message

  """Reads a single `Organization` using its globally unique `ID`."""
  organization(
    """
    The globally unique `ID` to be used in selecting a single `Organization`.
    """
    id: ID!
  ): Organization

  """Reads a single `OrganizationUser` using its globally unique `ID`."""
  organizationUser(
    """
    The globally unique `ID` to be used in selecting a single `OrganizationUser`.
    """
    id: ID!
  ): OrganizationUser

  """Reads a single `Session` using its globally unique `ID`."""
  session(
    """The globally unique `ID` to be used in selecting a single `Session`."""
    id: ID!
  ): Session

  """Reads a single `Stripe` using its globally unique `ID`."""
  stripe(
    """The globally unique `ID` to be used in selecting a single `Stripe`."""
    id: ID!
  ): Stripe

  """Reads a single `Tag` using its globally unique `ID`."""
  tag(
    """The globally unique `ID` to be used in selecting a single `Tag`."""
    id: ID!
  ): Tag

  """Reads a single `UserConfig` using its globally unique `ID`."""
  userConfig(
    """
    The globally unique `ID` to be used in selecting a single `UserConfig`.
    """
    id: ID!
  ): UserConfig

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    id: ID!
  ): User

  """Reads a single `VerificationRequest` using its globally unique `ID`."""
  verificationRequest(
    """
    The globally unique `ID` to be used in selecting a single `VerificationRequest`.
    """
    id: ID!
  ): VerificationRequest
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""A connection to a list of `Category` values."""
type CategoriesConnection {
  """A list of `Category` objects."""
  nodes: [Category]!

  """
  A list of edges which contains the `Category` and cursor to aid in pagination.
  """
  edges: [CategoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Category` you could get from the connection."""
  totalCount: Int!
}

type Category implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  name: String
  color: String
  organizationId: Int!
  sort: Int

  """Reads a single `Organization` that is related to this `Category`."""
  organizationByOrganizationId: Organization

  """Reads and enables pagination through a set of `Tag`."""
  tagsByCategoryId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition
  ): TagsConnection!

  """Reads and enables pagination through a set of `ConfigCategory`."""
  configCategoriesByCategoryId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ConfigCategory`."""
    orderBy: [ConfigCategoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConfigCategoryCondition
  ): ConfigCategoriesConnection!
}

type Organization implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  userId: Int!
  slug: String

  """Reads a single `User` that is related to this `Organization`."""
  userByUserId: User

  """Reads and enables pagination through a set of `Category`."""
  categoriesByOrganizationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CategoryCondition
  ): CategoriesConnection!

  """Reads and enables pagination through a set of `Invite`."""
  invitesByOrganizationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Invite`."""
    orderBy: [InvitesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InviteCondition
  ): InvitesConnection!

  """Reads and enables pagination through a set of `Message`."""
  messagesByOrganizationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition
  ): MessagesConnection!

  """Reads and enables pagination through a set of `MessageTag`."""
  messageTagsByOrganizationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MessageTag`."""
    orderBy: [MessageTagsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageTagCondition
  ): MessageTagsConnection!

  """Reads and enables pagination through a set of `UserConfig`."""
  userConfigsByDefaultOrganization(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserConfig`."""
    orderBy: [UserConfigsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserConfigCondition
  ): UserConfigsConnection!

  """Reads and enables pagination through a set of `OrganizationUser`."""
  organizationUsersByOrganizationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrganizationUser`."""
    orderBy: [OrganizationUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationUserCondition
  ): OrganizationUsersConnection!
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  name: String
  email: String
  emailVerified: Datetime
  image: String
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `Organization`."""
  organizationsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition
  ): OrganizationsConnection!

  """Reads a single `UserConfig` that is related to this `User`."""
  userConfigByUserId: UserConfig

  """Reads and enables pagination through a set of `UserConfig`."""
  userConfigsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserConfig`."""
    orderBy: [UserConfigsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserConfigCondition
  ): UserConfigsConnection! @deprecated(reason: "Please use userConfigByUserId instead")

  """Reads and enables pagination through a set of `OrganizationUser`."""
  organizationUsersByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrganizationUser`."""
    orderBy: [OrganizationUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationUserCondition
  ): OrganizationUsersConnection!

  """Reads and enables pagination through a set of `ConfigCategory`."""
  configCategoriesByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ConfigCategory`."""
    orderBy: [ConfigCategoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConfigCategoryCondition
  ): ConfigCategoriesConnection!
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""A connection to a list of `Organization` values."""
type OrganizationsConnection {
  """A list of `Organization` objects."""
  nodes: [Organization]!

  """
  A list of edges which contains the `Organization` and cursor to aid in pagination.
  """
  edges: [OrganizationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organization` you could get from the connection."""
  totalCount: Int!
}

"""A `Organization` edge in the connection."""
type OrganizationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Organization` at the end of the edge."""
  node: Organization
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `Organization`."""
enum OrganizationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  SLUG_ASC
  SLUG_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Organization` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganizationCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `slug` field."""
  slug: String
}

type UserConfig implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  userId: Int!
  defaultOrganization: Int!
  rowId: Int!

  """Reads a single `User` that is related to this `UserConfig`."""
  userByUserId: User

  """Reads a single `Organization` that is related to this `UserConfig`."""
  organizationByDefaultOrganization: Organization
}

"""A connection to a list of `UserConfig` values."""
type UserConfigsConnection {
  """A list of `UserConfig` objects."""
  nodes: [UserConfig]!

  """
  A list of edges which contains the `UserConfig` and cursor to aid in pagination.
  """
  edges: [UserConfigsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserConfig` you could get from the connection."""
  totalCount: Int!
}

"""A `UserConfig` edge in the connection."""
type UserConfigsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserConfig` at the end of the edge."""
  node: UserConfig
}

"""Methods to use when ordering `UserConfig`."""
enum UserConfigsOrderBy {
  NATURAL
  USER_ID_ASC
  USER_ID_DESC
  DEFAULT_ORGANIZATION_ASC
  DEFAULT_ORGANIZATION_DESC
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `UserConfig` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserConfigCondition {
  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `defaultOrganization` field."""
  defaultOrganization: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `OrganizationUser` values."""
type OrganizationUsersConnection {
  """A list of `OrganizationUser` objects."""
  nodes: [OrganizationUser]!

  """
  A list of edges which contains the `OrganizationUser` and cursor to aid in pagination.
  """
  edges: [OrganizationUsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `OrganizationUser` you could get from the connection.
  """
  totalCount: Int!
}

type OrganizationUser implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  organizationId: Int!
  userId: Int!
  rowId: Int!

  """
  Reads a single `Organization` that is related to this `OrganizationUser`.
  """
  organizationByOrganizationId: Organization

  """Reads a single `User` that is related to this `OrganizationUser`."""
  userByUserId: User
}

"""A `OrganizationUser` edge in the connection."""
type OrganizationUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OrganizationUser` at the end of the edge."""
  node: OrganizationUser
}

"""Methods to use when ordering `OrganizationUser`."""
enum OrganizationUsersOrderBy {
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `OrganizationUser` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganizationUserCondition {
  """Checks for equality with the object’s `organizationId` field."""
  organizationId: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `ConfigCategory` values."""
type ConfigCategoriesConnection {
  """A list of `ConfigCategory` objects."""
  nodes: [ConfigCategory]!

  """
  A list of edges which contains the `ConfigCategory` and cursor to aid in pagination.
  """
  edges: [ConfigCategoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ConfigCategory` you could get from the connection."""
  totalCount: Int!
}

type ConfigCategory implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  userId: Int!
  categoryId: Int!
  sort: Int
  collapse: Boolean

  """Reads a single `User` that is related to this `ConfigCategory`."""
  userByUserId: User

  """Reads a single `Category` that is related to this `ConfigCategory`."""
  categoryByCategoryId: Category
}

"""A `ConfigCategory` edge in the connection."""
type ConfigCategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ConfigCategory` at the end of the edge."""
  node: ConfigCategory
}

"""Methods to use when ordering `ConfigCategory`."""
enum ConfigCategoriesOrderBy {
  NATURAL
  USER_ID_ASC
  USER_ID_DESC
  CATEGORY_ID_ASC
  CATEGORY_ID_DESC
  SORT_ASC
  SORT_DESC
  COLLAPSE_ASC
  COLLAPSE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ConfigCategory` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ConfigCategoryCondition {
  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `categoryId` field."""
  categoryId: Int

  """Checks for equality with the object’s `sort` field."""
  sort: Int

  """Checks for equality with the object’s `collapse` field."""
  collapse: Boolean
}

"""Methods to use when ordering `Category`."""
enum CategoriesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  COLOR_ASC
  COLOR_DESC
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  SORT_ASC
  SORT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Category` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CategoryCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `color` field."""
  color: String

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: Int

  """Checks for equality with the object’s `sort` field."""
  sort: Int
}

"""A connection to a list of `Invite` values."""
type InvitesConnection {
  """A list of `Invite` objects."""
  nodes: [Invite]!

  """
  A list of edges which contains the `Invite` and cursor to aid in pagination.
  """
  edges: [InvitesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Invite` you could get from the connection."""
  totalCount: Int!
}

type Invite implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  organizationId: Int!
  email: String

  """Reads a single `Organization` that is related to this `Invite`."""
  organizationByOrganizationId: Organization
}

"""A `Invite` edge in the connection."""
type InvitesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Invite` at the end of the edge."""
  node: Invite
}

"""Methods to use when ordering `Invite`."""
enum InvitesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Invite` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input InviteCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: Int

  """Checks for equality with the object’s `email` field."""
  email: String
}

"""A connection to a list of `Message` values."""
type MessagesConnection {
  """A list of `Message` objects."""
  nodes: [Message]!

  """
  A list of edges which contains the `Message` and cursor to aid in pagination.
  """
  edges: [MessagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Message` you could get from the connection."""
  totalCount: Int!
}

type Message implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  content: String
  organizationId: Int!
  loomSharedUrl: String

  """Reads a single `Organization` that is related to this `Message`."""
  organizationByOrganizationId: Organization

  """Reads and enables pagination through a set of `MessageTag`."""
  messageTagsByMessageId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MessageTag`."""
    orderBy: [MessageTagsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageTagCondition
  ): MessageTagsConnection!
}

"""A connection to a list of `MessageTag` values."""
type MessageTagsConnection {
  """A list of `MessageTag` objects."""
  nodes: [MessageTag]!

  """
  A list of edges which contains the `MessageTag` and cursor to aid in pagination.
  """
  edges: [MessageTagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MessageTag` you could get from the connection."""
  totalCount: Int!
}

type MessageTag {
  messageId: Int!
  tagId: Int!
  organizationId: Int!

  """Reads a single `Message` that is related to this `MessageTag`."""
  messageByMessageId: Message

  """Reads a single `Tag` that is related to this `MessageTag`."""
  tagByTagId: Tag

  """Reads a single `Organization` that is related to this `MessageTag`."""
  organizationByOrganizationId: Organization
}

type Tag implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  name: String
  categoryId: Int!

  """Reads a single `Category` that is related to this `Tag`."""
  categoryByCategoryId: Category

  """Reads and enables pagination through a set of `MessageTag`."""
  messageTagsByTagId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MessageTag`."""
    orderBy: [MessageTagsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageTagCondition
  ): MessageTagsConnection!
}

"""Methods to use when ordering `MessageTag`."""
enum MessageTagsOrderBy {
  NATURAL
  MESSAGE_ID_ASC
  MESSAGE_ID_DESC
  TAG_ID_ASC
  TAG_ID_DESC
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
}

"""
A condition to be used against `MessageTag` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MessageTagCondition {
  """Checks for equality with the object’s `messageId` field."""
  messageId: Int

  """Checks for equality with the object’s `tagId` field."""
  tagId: Int

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: Int
}

"""A `MessageTag` edge in the connection."""
type MessageTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MessageTag` at the end of the edge."""
  node: MessageTag
}

"""A `Message` edge in the connection."""
type MessagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Message` at the end of the edge."""
  node: Message
}

"""Methods to use when ordering `Message`."""
enum MessagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CONTENT_ASC
  CONTENT_DESC
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  LOOM_SHARED_URL_ASC
  LOOM_SHARED_URL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Message` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MessageCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `content` field."""
  content: String

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: Int

  """Checks for equality with the object’s `loomSharedUrl` field."""
  loomSharedUrl: String
}

"""A connection to a list of `Tag` values."""
type TagsConnection {
  """A list of `Tag` objects."""
  nodes: [Tag]!

  """
  A list of edges which contains the `Tag` and cursor to aid in pagination.
  """
  edges: [TagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Tag` you could get from the connection."""
  totalCount: Int!
}

"""A `Tag` edge in the connection."""
type TagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Tag` at the end of the edge."""
  node: Tag
}

"""Methods to use when ordering `Tag`."""
enum TagsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CATEGORY_ID_ASC
  CATEGORY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Tag` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TagCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `categoryId` field."""
  categoryId: Int
}

"""A `Category` edge in the connection."""
type CategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Category` at the end of the edge."""
  node: Category
}

type Account implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  compoundId: String!
  userId: Int!
  providerType: String!
  providerId: String!
  providerAccountId: String!
  refreshToken: String
  accessToken: String
  accessTokenExpires: Datetime
  createdAt: Datetime!
  updatedAt: Datetime!
}

type Session implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  userId: Int!
  expires: Datetime!
  sessionToken: String!
  accessToken: String!
  createdAt: Datetime!
  updatedAt: Datetime!
}

type Stripe implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  createdAt: Datetime!
  stripeTransactionDate: Datetime!
  amount: Float!
  quantity: Int!
  email: String!
  userId: Int!
}

type VerificationRequest implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  identifier: String!
  token: String!
  expires: Datetime!
  createdAt: Datetime!
  updatedAt: Datetime!
}

"""A connection to a list of `Int` values."""
type OrganizationOwnerConnection {
  """A list of `Int` objects."""
  nodes: [Int]!

  """
  A list of edges which contains the `Int` and cursor to aid in pagination.
  """
  edges: [OrganizationOwnerEdge!]!

  """The count of *all* `Int` you could get from the connection."""
  totalCount: Int!
}

"""A `Int` edge in the connection."""
type OrganizationOwnerEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Int` at the end of the edge."""
  node: Int
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  createCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCategoryInput!
  ): CreateCategoryPayload
  createInvite(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateInviteInput!
  ): CreateInvitePayload
  createMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMessageInput!
  ): CreateMessagePayload
  createMessageTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMessageTagInput!
  ): CreateMessageTagPayload
  createOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationInput!
  ): CreateOrganizationPayload
  createTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTagInput!
  ): CreateTagPayload
  createUserConfig(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserConfigInput!
  ): CreateUserConfigPayload
  deleteCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCategoryInput!
  ): DeleteCategoryPayload
  deleteInvite(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInviteInput!
  ): DeleteInvitePayload
  deleteMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMessageInput!
  ): DeleteMessagePayload
  deleteMessageTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMessageTagInput!
  ): DeleteMessageTagPayload
  deleteOrganizationUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationUserInput!
  ): DeleteOrganizationUserPayload
  deleteTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTagInput!
  ): DeleteTagPayload
  removeMessageTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RemoveMessageTagInput!
  ): RemoveMessageTagPayload
  sortCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SortCategoryInput!
  ): SortCategoryPayload
  updateCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCategoryInput!
  ): UpdateCategoryPayload
  updateMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMessageInput!
  ): UpdateMessagePayload
  updateTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTagInput!
  ): UpdateTagPayload
}

"""The output of our `createCategory` mutation."""
type CreateCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  category: Category

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Organization` that is related to this `Category`."""
  organizationByOrganizationId: Organization

  """An edge for our `Category`. May be used by Relay 1."""
  categoryEdge(
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesEdge
}

"""All input for the `createCategory` mutation."""
input CreateCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: Int!
  name: String!
  color: String!
}

"""The output of our `createInvite` mutation."""
type CreateInvitePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  invite: Invite

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Organization` that is related to this `Invite`."""
  organizationByOrganizationId: Organization

  """An edge for our `Invite`. May be used by Relay 1."""
  inviteEdge(
    """The method to use when ordering `Invite`."""
    orderBy: [InvitesOrderBy!] = [PRIMARY_KEY_ASC]
  ): InvitesEdge
}

"""All input for the `createInvite` mutation."""
input CreateInviteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: Int!
  email: String!
}

"""The output of our `createMessage` mutation."""
type CreateMessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  messages: [Message]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createMessage` mutation."""
input CreateMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: Int!
  content: String!
  tags: [Int]!
  loomSharedUrl: String
}

"""The output of our `createMessageTag` mutation."""
type CreateMessageTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  messageTag: MessageTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Message` that is related to this `MessageTag`."""
  messageByMessageId: Message

  """Reads a single `Tag` that is related to this `MessageTag`."""
  tagByTagId: Tag

  """Reads a single `Organization` that is related to this `MessageTag`."""
  organizationByOrganizationId: Organization

  """An edge for our `MessageTag`. May be used by Relay 1."""
  messageTagEdge(
    """The method to use when ordering `MessageTag`."""
    orderBy: [MessageTagsOrderBy!] = [NATURAL]
  ): MessageTagsEdge
}

"""All input for the `createMessageTag` mutation."""
input CreateMessageTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  messageId: Int!
  tagId: Int!
  organizationId: Int!
}

"""The output of our `createOrganization` mutation."""
type CreateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Organization`."""
  userByUserId: User

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge
}

"""All input for the `createOrganization` mutation."""
input CreateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: Int!
  slug: String!
}

"""The output of our `createTag` mutation."""
type CreateTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  tag: Tag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Category` that is related to this `Tag`."""
  categoryByCategoryId: Category

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge
}

"""All input for the `createTag` mutation."""
input CreateTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
  categoryId: Int!
}

"""The output of our `createUserConfig` mutation."""
type CreateUserConfigPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  userConfig: UserConfig

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserConfig`."""
  userByUserId: User

  """Reads a single `Organization` that is related to this `UserConfig`."""
  organizationByDefaultOrganization: Organization

  """An edge for our `UserConfig`. May be used by Relay 1."""
  userConfigEdge(
    """The method to use when ordering `UserConfig`."""
    orderBy: [UserConfigsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserConfigsEdge
}

"""All input for the `createUserConfig` mutation."""
input CreateUserConfigInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  defaultOrganization: Int!
}

"""The output of our `deleteCategory` mutation."""
type DeleteCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  category: Category

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Organization` that is related to this `Category`."""
  organizationByOrganizationId: Organization

  """An edge for our `Category`. May be used by Relay 1."""
  categoryEdge(
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesEdge
}

"""All input for the `deleteCategory` mutation."""
input DeleteCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  categoryId: Int!
}

"""The output of our `deleteInvite` mutation."""
type DeleteInvitePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  invite: Invite

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Organization` that is related to this `Invite`."""
  organizationByOrganizationId: Organization

  """An edge for our `Invite`. May be used by Relay 1."""
  inviteEdge(
    """The method to use when ordering `Invite`."""
    orderBy: [InvitesOrderBy!] = [PRIMARY_KEY_ASC]
  ): InvitesEdge
}

"""All input for the `deleteInvite` mutation."""
input DeleteInviteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: Int!
  email: String!
}

"""The output of our `deleteMessage` mutation."""
type DeleteMessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  message: Message

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Organization` that is related to this `Message`."""
  organizationByOrganizationId: Organization

  """An edge for our `Message`. May be used by Relay 1."""
  messageEdge(
    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessagesEdge
}

"""All input for the `deleteMessage` mutation."""
input DeleteMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  messageId: Int!
}

"""The output of our `deleteMessageTag` mutation."""
type DeleteMessageTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  messageTag: MessageTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Message` that is related to this `MessageTag`."""
  messageByMessageId: Message

  """Reads a single `Tag` that is related to this `MessageTag`."""
  tagByTagId: Tag

  """Reads a single `Organization` that is related to this `MessageTag`."""
  organizationByOrganizationId: Organization

  """An edge for our `MessageTag`. May be used by Relay 1."""
  messageTagEdge(
    """The method to use when ordering `MessageTag`."""
    orderBy: [MessageTagsOrderBy!] = [NATURAL]
  ): MessageTagsEdge
}

"""All input for the `deleteMessageTag` mutation."""
input DeleteMessageTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tagId: Int!
}

"""The output of our `deleteOrganizationUser` mutation."""
type DeleteOrganizationUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  organizationUser: OrganizationUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Organization` that is related to this `OrganizationUser`.
  """
  organizationByOrganizationId: Organization

  """Reads a single `User` that is related to this `OrganizationUser`."""
  userByUserId: User

  """An edge for our `OrganizationUser`. May be used by Relay 1."""
  organizationUserEdge(
    """The method to use when ordering `OrganizationUser`."""
    orderBy: [OrganizationUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationUsersEdge
}

"""All input for the `deleteOrganizationUser` mutation."""
input DeleteOrganizationUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: Int!
  userId: Int!
}

"""The output of our `deleteTag` mutation."""
type DeleteTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  tag: Tag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Category` that is related to this `Tag`."""
  categoryByCategoryId: Category

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge
}

"""All input for the `deleteTag` mutation."""
input DeleteTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tagId: Int!
}

"""The output of our `removeMessageTag` mutation."""
type RemoveMessageTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  messageTag: MessageTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Message` that is related to this `MessageTag`."""
  messageByMessageId: Message

  """Reads a single `Tag` that is related to this `MessageTag`."""
  tagByTagId: Tag

  """Reads a single `Organization` that is related to this `MessageTag`."""
  organizationByOrganizationId: Organization

  """An edge for our `MessageTag`. May be used by Relay 1."""
  messageTagEdge(
    """The method to use when ordering `MessageTag`."""
    orderBy: [MessageTagsOrderBy!] = [NATURAL]
  ): MessageTagsEdge
}

"""All input for the `removeMessageTag` mutation."""
input RemoveMessageTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tagId: Int!
  messageId: Int!
}

"""The output of our `sortCategory` mutation."""
type SortCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `sortCategory` mutation."""
input SortCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  categoryIds: [Int]!
  sort: [Int]!
}

"""The output of our `updateCategory` mutation."""
type UpdateCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  category: Category

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Organization` that is related to this `Category`."""
  organizationByOrganizationId: Organization

  """An edge for our `Category`. May be used by Relay 1."""
  categoryEdge(
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesEdge
}

"""All input for the `updateCategory` mutation."""
input UpdateCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
  name: String!
  color: String!
}

"""The output of our `updateMessage` mutation."""
type UpdateMessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  messages: [Message]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateMessage` mutation."""
input UpdateMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
  content: String!
  loomSharedUrl: String
}

"""The output of our `updateTag` mutation."""
type UpdateTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  tag: Tag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Category` that is related to this `Tag`."""
  categoryByCategoryId: Category

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge
}

"""All input for the `updateTag` mutation."""
input UpdateTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
  name: String!
}
